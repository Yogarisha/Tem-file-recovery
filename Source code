import os import shutil import logging  # Add this line to import the logging module 
 
# Function to retrieve list of temporary files and copy them to a new folder def copy_temp_files(temp_dir, copy_dir):     temp_files = []     for root, dirs, files in os.walk(temp_dir):         for file in files: 
            file_path = os.path.join(root, file)             temp_files.append(file_path) 
            try: 
                shutil.copy2(file_path, copy_dir)  # Copy each temporary file to the copy directory             except PermissionError as e:                 if file_path.endswith(('.bmp', '.dll')): 
                    logging.warning(f"Permission denied for {file_path}: {e}. Skipping.") 
                    continue 
 
                else: 
                    raise e  # Re-raise the exception for other file types     return temp_files 
 
 
# Function to save list of temporary files to a text file def save_temp_files_list(temp_files, output_file):     with open(output_file, 'w') as f:         for temp_file in temp_files: 
            f.write(temp_file + '\n') 
 
# Main function def main():     temp_dir = os.environ.get('TEMP')  # Get the path to the temporary files directory     output_file = 'temp_files_list.txt'  # Specify the name of the output text file     copy_dir = 'copied_temp_files'  # Specify the name of the directory to copy temporary files 
 
    # Check if temporary files directory exists     if temp_dir: 
        # Create a new directory to copy temporary files         if not os.path.exists(copy_dir): 
            os.makedirs(copy_dir) 
 
        temp_files = copy_temp_files(temp_dir, copy_dir) 
        save_temp_files_list(temp_files, output_file)         print(f"Temporary files list saved to {output_file} and copied to {copy_dir}") 
    else: 
        print("Temporary files directory not found. Please check your system configuration.") 
 
if __name__ == "__main__": 
    main() 
 
SETUP SOURCE CODE: 
import tkinter as tk from tkinter import ttk import subprocess import os 
 
def get_network_status(): 
    try: 
        wifi_status = subprocess.check_output(['netsh', 'wlan', 'show', 'interfaces'], universal_newlines=True)         ethernet_status = subprocess.check_output(['ipconfig'], universal_newlines=True) 
 
        text_widget.delete('1.0', 'end')  # Clear previous text         text_widget.insert('end', "Wi-Fi Status:\n")         text_widget.insert('end', wifi_status)         text_widget.insert('end', "\n\nEthernet Status:\n")         text_widget.insert('end', ethernet_status) 
    except subprocess.CalledProcessError: 
        text_widget.delete('1.0', 'end')         text_widget.insert('end', "Failed to retrieve network status.") 
 
def get_connection_history():     connection_history = [] 
    try: 
        # Retrieve connection history from system logs or configuration files 
        # Replace the following path with the actual path to your connection history data         history_path = "C:/path/to/your/history.txt" 
        
        with open(history_path, 'r') as file: 
            connection_history = file.readlines() 
 
        # Clear previous text and display the connection history on Tab 2         text_widget2.delete('1.0', 'end')         text_widget2.insert('end', "Connection History:\n")         for connection in connection_history:             text_widget2.insert('end', connection) 
 
    except (FileNotFoundError, IOError): 
        text_widget2.delete('1.0', 'end')         text_widget2.insert('end', "Failed to retrieve connection history.") def get_wifi_processes(): 
    try: 
        wifi_processes = subprocess.check_output(['netsh', 'wlan', 'show', 'all'], universal_newlines=True) 
 
        text_widget3.delete('1.0', 'end')  # Clear previous text         text_widget3.insert('end', "Wi-Fi Processes and Activities:\n")         text_widget3.insert('end', wifi_processes)     except subprocess.CalledProcessError: 
        text_widget3.delete('1.0', 'end')         text_widget3.insert('end', "Failed to retrieve Wi-Fi processes.") 
 
root = tk.Tk() root.title("Network Status and Connection History GUI") 
 
notebook = ttk.Notebook(root) notebook.pack(fill='both', expand='yes') 
 
tab1 = ttk.Frame(notebook) notebook.add(tab1, text="WiFi Information") 
 
tab2 = ttk.Frame(notebook) notebook.add(tab2, text="WiFi History") 
 
# Create a new tab for "Transparent Network" 
tab3 = ttk.Frame(notebook) notebook.add(tab3, text="Transparent Network") 
 
text_widget = tk.Text(tab1) text_widget.pack() 
# Function to retrieve list of temporary files and copy them to a new folder def copy_temp_files(temp_dir, copy_dir):     temp_files = []     for root, dirs, files in os.walk(temp_dir):         for file in files: 
            file_path = os.path.join(root, file)             temp_files.append(file_path) 
            try: 
                shutil.copy2(file_path, copy_dir)  # Copy each temporary file to the copy directory             except PermissionError as e: 
                logging.warning(f"Permission denied for {file_path}: {e}. Skipping.")                 continue  # Skip copying this file if permission denied     return temp_files # Main function def main():     temp_dir = os.environ.get('TEMP')  # Get the path to the temporary files directory     output_file = 'temp_files_list.txt'  # Specify the name of the output text file     copy_dir = 'copied_temp_files'  # Specify the name of the directory to copy temporary files     # Check if temporary files directory exists         temp_files = copy_temp_files(temp_dir, copy_dir)         save_temp_files_list(temp_files, output_file)         print(f"Temporary files list saved to {output_file} and copied to {copy_dir}") 
    else: 
        print("Temporary files directory not found. Please check your system configuration.") 
 
refresh_button1 	= 	tk.Button(tab1, 	text="Refresh 	Network 	Status", command=get_network_status) refresh_button1.pack() 
 
text_widget2 = tk.Text(tab2) text_widget2.pack() 
 
refresh_button2 	= 	tk.Button(tab2, 	text="Retrieve 	Connection 	History", command=get_connection_history) refresh_button2.pack() 
 
# Create a Text widget and button for the "Transparent Network" tab text_widget3 = tk.Text(tab3) text_widget3.pack() if __name__ == "__main__": 
    main() 
